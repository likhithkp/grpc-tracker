// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/trips/trip.proto

package trips

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TripService_GetTripStats_FullMethodName               = "/trackerTripProto.TripService/GetTripStats"
	TripService_FetchTripListing_FullMethodName           = "/trackerTripProto.TripService/FetchTripListing"
	TripService_FetchTripDetail_FullMethodName            = "/trackerTripProto.TripService/FetchTripDetail"
	TripService_CancelBooking_FullMethodName              = "/trackerTripProto.TripService/CancelBooking"
	TripService_AssignDriverToTripByAdmin_FullMethodName  = "/trackerTripProto.TripService/AssignDriverToTripByAdmin"
	TripService_FindSuitableDriversForTrip_FullMethodName = "/trackerTripProto.TripService/FindSuitableDriversForTrip"
	TripService_GetCancelledTripStats_FullMethodName      = "/trackerTripProto.TripService/GetCancelledTripStats"
)

// TripServiceClient is the client API for TripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripServiceClient interface {
	GetTripStats(ctx context.Context, in *TripStatsRequest, opts ...grpc.CallOption) (*TripStatsResponse, error)
	FetchTripListing(ctx context.Context, in *FetchTripListingRequest, opts ...grpc.CallOption) (*TripListingResponse, error)
	FetchTripDetail(ctx context.Context, in *FetchTripDetailRequest, opts ...grpc.CallOption) (*FetchTripDetailResponse, error)
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error)
	AssignDriverToTripByAdmin(ctx context.Context, in *AssignDriverToTripByAdminRequest, opts ...grpc.CallOption) (*AssignDriverToTripByAdminResponse, error)
	FindSuitableDriversForTrip(ctx context.Context, in *FindSuitableDriversForTripRequest, opts ...grpc.CallOption) (*FindSuitableDriversForTripResponse, error)
	GetCancelledTripStats(ctx context.Context, in *CancelledTripStatsRequest, opts ...grpc.CallOption) (*CancelledTripStatsResponse, error)
}

type tripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripServiceClient(cc grpc.ClientConnInterface) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) GetTripStats(ctx context.Context, in *TripStatsRequest, opts ...grpc.CallOption) (*TripStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TripStatsResponse)
	err := c.cc.Invoke(ctx, TripService_GetTripStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) FetchTripListing(ctx context.Context, in *FetchTripListingRequest, opts ...grpc.CallOption) (*TripListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TripListingResponse)
	err := c.cc.Invoke(ctx, TripService_FetchTripListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) FetchTripDetail(ctx context.Context, in *FetchTripDetailRequest, opts ...grpc.CallOption) (*FetchTripDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchTripDetailResponse)
	err := c.cc.Invoke(ctx, TripService_FetchTripDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelBookingResponse)
	err := c.cc.Invoke(ctx, TripService_CancelBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) AssignDriverToTripByAdmin(ctx context.Context, in *AssignDriverToTripByAdminRequest, opts ...grpc.CallOption) (*AssignDriverToTripByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignDriverToTripByAdminResponse)
	err := c.cc.Invoke(ctx, TripService_AssignDriverToTripByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) FindSuitableDriversForTrip(ctx context.Context, in *FindSuitableDriversForTripRequest, opts ...grpc.CallOption) (*FindSuitableDriversForTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSuitableDriversForTripResponse)
	err := c.cc.Invoke(ctx, TripService_FindSuitableDriversForTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetCancelledTripStats(ctx context.Context, in *CancelledTripStatsRequest, opts ...grpc.CallOption) (*CancelledTripStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelledTripStatsResponse)
	err := c.cc.Invoke(ctx, TripService_GetCancelledTripStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TripServiceServer is the server API for TripService service.
// All implementations must embed UnimplementedTripServiceServer
// for forward compatibility.
type TripServiceServer interface {
	GetTripStats(context.Context, *TripStatsRequest) (*TripStatsResponse, error)
	FetchTripListing(context.Context, *FetchTripListingRequest) (*TripListingResponse, error)
	FetchTripDetail(context.Context, *FetchTripDetailRequest) (*FetchTripDetailResponse, error)
	CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error)
	AssignDriverToTripByAdmin(context.Context, *AssignDriverToTripByAdminRequest) (*AssignDriverToTripByAdminResponse, error)
	FindSuitableDriversForTrip(context.Context, *FindSuitableDriversForTripRequest) (*FindSuitableDriversForTripResponse, error)
	GetCancelledTripStats(context.Context, *CancelledTripStatsRequest) (*CancelledTripStatsResponse, error)
	mustEmbedUnimplementedTripServiceServer()
}

// UnimplementedTripServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTripServiceServer struct{}

func (UnimplementedTripServiceServer) GetTripStats(context.Context, *TripStatsRequest) (*TripStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTripStats not implemented")
}
func (UnimplementedTripServiceServer) FetchTripListing(context.Context, *FetchTripListingRequest) (*TripListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTripListing not implemented")
}
func (UnimplementedTripServiceServer) FetchTripDetail(context.Context, *FetchTripDetailRequest) (*FetchTripDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTripDetail not implemented")
}
func (UnimplementedTripServiceServer) CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedTripServiceServer) AssignDriverToTripByAdmin(context.Context, *AssignDriverToTripByAdminRequest) (*AssignDriverToTripByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDriverToTripByAdmin not implemented")
}
func (UnimplementedTripServiceServer) FindSuitableDriversForTrip(context.Context, *FindSuitableDriversForTripRequest) (*FindSuitableDriversForTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuitableDriversForTrip not implemented")
}
func (UnimplementedTripServiceServer) GetCancelledTripStats(context.Context, *CancelledTripStatsRequest) (*CancelledTripStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCancelledTripStats not implemented")
}
func (UnimplementedTripServiceServer) mustEmbedUnimplementedTripServiceServer() {}
func (UnimplementedTripServiceServer) testEmbeddedByValue()                     {}

// UnsafeTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripServiceServer will
// result in compilation errors.
type UnsafeTripServiceServer interface {
	mustEmbedUnimplementedTripServiceServer()
}

func RegisterTripServiceServer(s grpc.ServiceRegistrar, srv TripServiceServer) {
	// If the following call pancis, it indicates UnimplementedTripServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TripService_ServiceDesc, srv)
}

func _TripService_GetTripStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTripStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTripStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTripStats(ctx, req.(*TripStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_FetchTripListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTripListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).FetchTripListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_FetchTripListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).FetchTripListing(ctx, req.(*FetchTripListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_FetchTripDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTripDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).FetchTripDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_FetchTripDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).FetchTripDetail(ctx, req.(*FetchTripDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CancelBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_AssignDriverToTripByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDriverToTripByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).AssignDriverToTripByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_AssignDriverToTripByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).AssignDriverToTripByAdmin(ctx, req.(*AssignDriverToTripByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_FindSuitableDriversForTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuitableDriversForTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).FindSuitableDriversForTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_FindSuitableDriversForTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).FindSuitableDriversForTrip(ctx, req.(*FindSuitableDriversForTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetCancelledTripStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelledTripStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetCancelledTripStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetCancelledTripStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetCancelledTripStats(ctx, req.(*CancelledTripStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TripService_ServiceDesc is the grpc.ServiceDesc for TripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trackerTripProto.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTripStats",
			Handler:    _TripService_GetTripStats_Handler,
		},
		{
			MethodName: "FetchTripListing",
			Handler:    _TripService_FetchTripListing_Handler,
		},
		{
			MethodName: "FetchTripDetail",
			Handler:    _TripService_FetchTripDetail_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _TripService_CancelBooking_Handler,
		},
		{
			MethodName: "AssignDriverToTripByAdmin",
			Handler:    _TripService_AssignDriverToTripByAdmin_Handler,
		},
		{
			MethodName: "FindSuitableDriversForTrip",
			Handler:    _TripService_FindSuitableDriversForTrip_Handler,
		},
		{
			MethodName: "GetCancelledTripStats",
			Handler:    _TripService_GetCancelledTripStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/trips/trip.proto",
}
